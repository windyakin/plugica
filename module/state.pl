#====================================================================================================
#
#	トランスポンダ状況取得モジュール
#	state.pl
#
#	---------------------------------------------------------------------------
#
#	2012.09.11 start
#
#====================================================================================================
package STATE;

use strict;

#------------------------------------------------------------------------------------------------------------
#
#	モジュールコンストラクタ - new
#	-------------------------------------------
#	@param	なし
#	@return	モジュールオブジェクト
#
#------------------------------------------------------------------------------------------------------------
sub new
{
	my $this = shift;
	my $obj = {};
	my (@state);
	
	@state = ();
	
	$obj = {
		'STATE'		=> \@state,
	};
	
	bless $obj, $this;
	
	return $obj;
}

#------------------------------------------------------------------------------------------------------------
#
#	トランスポンダ側の状態を取得してくる
#	-------------------------------------------
#	@param	$SHOP		SHOPハンドル
#			$shopID		店舗ID
#	@return	作成に成功したら1 失敗したら0
#
#------------------------------------------------------------------------------------------------------------
sub requestState
{
	my $this = shift;
	my ($SHOP) = @_;
	#my ($SOCK);
	
	require('./module/sockets.pl');
	my $SOCK = SOCKETS->new;
	
	# ソケットの作成
	if ( ! $SOCK->CreateSocket ) {
		return 0;
	}
	
	# 接続先の設定
	$SOCK->SetRemote($SHOP->Get('IP'));
	
	# いざ接続！
	if ( ! $SOCK->ConnectHost('get state all') ) {
		return 0;
	}
	
	undef @{$this->{'STATE'}};
	
	# 帰ってきた内容をこれから調理していきます。
	foreach ( split( /\R/, $SOCK->GetData() ) ) {
		if ( $_ =~ /^\d+$/ ) { next; } # 数字だけの行は飛ばしたい
		my @temp = split( /:/, $_ );
		push ( @{$this->{'STATE'}}, {
			'CID'		=> $temp[0],
			'used'		=> $temp[1],
			'IDm'		=> $temp[2],
			'PMm'		=> $temp[3],
			'Watt'		=> $temp[4],
			'kWh'		=> $temp[5],
			'Wallet'	=> $temp[6],
		} );
	}
	
	return 1;
}

#------------------------------------------------------------------------------------------------------------
#
#	IDmからステータスを検索する
#	-------------------------------------------
#	@param	$IDm		Felica-IDm
#	@return	そのIDmが使っているコンセントのstate 検索ヒットしなければNULL
#
#------------------------------------------------------------------------------------------------------------
sub getState
{
	my $this = shift;
	my ($IDm) = @_;
	my ($state);
	
	$state = undef;
	
	foreach ( @{$this->{'STATE'}} ) {
		if ( $_->{'IDm'} eq $IDm ) {
			$state = $_;
		}
	}
	
	return $state;
}

#============================================================================================================
#	モジュール終端
#============================================================================================================
1;
