#====================================================================================================
#
#	フォーム情報管理モジュール
#	form.pl
#
#	---------------------------------------------------------------------------
#
#	2012.07.20 start
#	           ぜろちゃんねるプラスから必要な部分を移植
#
#====================================================================================================
package FORM;

use strict;

use CGI::Cookie;

#------------------------------------------------------------------------------------------------------------
#
#	モジュールコンストラクタ - new
#	-------------------------------------------
#	@param	なし
#	@return	モジュールオブジェクト
#
#------------------------------------------------------------------------------------------------------------
sub new
{
	my $this = shift;
	my ($noget, $cookie) = @_;
	my (%FORM, @SRC, $form, %cookies, $obj);
	
	if ($ENV{'REQUEST_METHOD'} eq 'POST') {					# POSTメソッド
		read STDIN, $form, $ENV{'CONTENT_LENGTH'};
	}
	elsif ( defined $ENV{'QUERY_STRING'} && ! $noget ) {	# GETメソッド
		$form = $ENV{'QUERY_STRING'};
	}
	else {
		$form = '';
	}
	
	# クッキー
	if ( $cookie ) {
		%cookies = CGI::Cookie->fetch;
	}
	else {
		undef %cookies;
	}
	
	@SRC = split(/&/, $form);								# データ分離
	
	$obj = {
		'FORM'	=> \%FORM,
		'SRC'	=> \@SRC,
		'COOKIE'=> \%cookies,
	};
	
	bless $obj, $this;
	
	return $obj;
}

#------------------------------------------------------------------------------------------------------------
#
#	フォーム情報デコード - DecodeForm
#	-------------------------------------------
#	@param	なし
#	@return	なし
#
#------------------------------------------------------------------------------------------------------------
sub DecodeForm
{
	my $this = shift;
	my ($mode) = @_;
	my ($var, $val, $code, %cookies);
	
	undef %{$this->{'FORM'}};
	
	foreach (@{$this->{'SRC'}}) {										# 各データごとに処理
		($var, $val) = split(/=/, $_);									# name/valueで分離
		$val =~ tr/+/ /;
		$val =~ s/%([0-9a-fA-F][0-9a-fA-F])/pack('C', hex($1))/eg;
		$val =~ s/\r\n|\r|\n/\n/g;										# 改行を統一
		$val =~ s/\0//g;												# ぬるぽ
		$this->{'FORM'}->{$var} = $val;									# データセット
		#$this->{'FORM'}->{"Raw_$var"} = $val;							# データセット
	}
	
	%cookies = %{$this->{'COOKIE'}};
	if ( defined %cookies ) {
		foreach( keys %cookies ) {
			$this->{'FORM'}->{%cookies->{$_}->{'name'}} = %cookies->{$_}->{'value'}[0];
		}
	}
}

#------------------------------------------------------------------------------------------------------------
#
#	クッキー☆
#	-------------------------------------------
#	@param	なし
#	@return	なし
#
#------------------------------------------------------------------------------------------------------------
sub GetCookie
{
}

#------------------------------------------------------------------------------------------------------------
#
#	フォーム情報取得 - Get
#	-------------------------------------------
#	@param	$key		取得キー
#			$default	デフォルト
#	@return	データ
#
#------------------------------------------------------------------------------------------------------------
sub Get
{
	my $this = shift;
	my ($key, $default) = @_;
	my ($val);
	
	$val = $this->{'FORM'}->{$key};
	
	return (defined $val ? $val : (defined $default ? $default : ''));
}

#------------------------------------------------------------------------------------------------------------
#
#	フォーム情報設定 - Set
#	-------------------------------------------
#	@param	$key		取得キー
#			$data		設定データ
#	@return	なし
#
#------------------------------------------------------------------------------------------------------------
sub Set
{
	my $this = shift;
	my ($key, $data) = @_;
	
	$this->{'FORM'}->{$key} = $data;
}

#------------------------------------------------------------------------------------------------------------
#
#	form値存在確認
#	-------------------------------------------------------------------------------------
#	@param	$key		キー
#			$data		値
#	@return	値が等しいならtrueを返す
#
#------------------------------------------------------------------------------------------------------------
sub Equal
{
	my $this = shift;
	my ($key, $data) = @_;
	my ($val);
	
	$val = $this->{'FORM'}->{$key};
	
	return (defined $val && $val eq $data);
}

#------------------------------------------------------------------------------------------------------------
#
#	入力チェック - IsInput
#	-------------------------------------------
#	@param	@keylist	判定項目リスト
#	@return	入力OKなら1,未入力ありなら0
#
#------------------------------------------------------------------------------------------------------------
sub IsInput
{
	my $this = shift;
	my (@pKeyList) = @_;
	
	foreach (@pKeyList) {
		if ($this->{'FORM'}->{$_} eq '') {
			return 0;
		}
	}
	return 1;
}

#------------------------------------------------------------------------------------------------------------
#
#	全入力チェック - IsInput
#	-------------------------------------------
#	@param	なし
#	@return	入力OKなら1,未入力ありなら0
#
#------------------------------------------------------------------------------------------------------------
sub IsInputAll
{
	my $this = shift;
	
	foreach (keys %{$this->{'FORM'}}) {
		if ($this->{'FORM'}->{$_} eq '') {
			return 0;
		}
	}
	return 1;
}

#------------------------------------------------------------------------------------------------------------
#
#	form値存在確認
#	-------------------------------------------------------------------------------------
#	@param	$key		キー
#	@return	キーが存在したらtrue
#
#------------------------------------------------------------------------------------------------------------
sub IsExist
{
	my $this = shift;
	my (@pKeyList) = @_;
	
	foreach (@pKeyList) {
		if ( exists $this->{'FORM'}->{$_} ) {
			return 1;
		}
	}
	return 0;
}

#------------------------------------------------------------------------------------------------------------
#
#	form値存在確認
#	-------------------------------------------------------------------------------------
#	@param	$key		キー
#			$string		検索文字
#	@return	検索文字が存在したら1
#
#------------------------------------------------------------------------------------------------------------
sub Contain
{
	my $this = shift;
	my ($key, $string) = @_;
	
	if ($this->{'FORM'}->{$key} =~ /\Q$string\E/) {
		return 1;
	}
	return 0;
}

#------------------------------------------------------------------------------------------------------------
#
#	数字調査
#	-------------------------------------------------------------------------------------
#	@param	@pKeys		調査データキー
#	@return	数字なら1
#
#------------------------------------------------------------------------------------------------------------
sub IsNumber
{
	my $this = shift;
	my (@pKeys) = @_;
	
	foreach (@pKeys) {
		if ($this->{'FORM'}->{$_} !~ /^\d+$/) {
			return 0;
		}
	}
	return 1;
}

#------------------------------------------------------------------------------------------------------------
#
#	小数・整数調査
#	-------------------------------------------------------------------------------------
#	@param	@pKeys		調査データキー
#	@return	小数もしくは整数なら1
#
#------------------------------------------------------------------------------------------------------------
sub IsDecimal #小数的な意味でdecimal
{
	my $this = shift;
	my (@pKeys) = @_;
	
	foreach (@pKeys) {
		if ($this->{'FORM'}->{$_} !~ /^\d*?\.?\d+$/) {
			return 0;
		}
	}
	return 1;
}

#------------------------------------------------------------------------------------------------------------
#
#	IDm&PMm調査
#	-------------------------------------------------------------------------------------
#	@param	@pKeys		調査データキー
#	@return	64bit長の16進数なら1
#
#------------------------------------------------------------------------------------------------------------
sub Is64bitHex
{
	my $this = shift;
	my (@pKeys) = @_;
	
	foreach (@pKeys) {
		if ($this->{'FORM'}->{$_} !~ /^[0-9A-F]{16}$/) {
			return 0;
		}
	}
	return 1;
}

#------------------------------------------------------------------------------------------------------------
#
#	Base64調査
#	-------------------------------------------------------------------------------------
#	@param	@pKeys		調査データキー
#	@return	Base64文字列であれば1
#
#------------------------------------------------------------------------------------------------------------
sub IsBase64
{
	my $this = shift;
	my (@pKeys) = @_;
	
	foreach (@pKeys) {
		if ($this->{'FORM'}->{$_} !~ /^[\w\/\.\+]+$/) {
			return 0;
		}
	}
	return 1;
}

#------------------------------------------------------------------------------------------------------------
#
#	半角英数字調査
#	-------------------------------------------------------------------------------------
#	@param	$pKeys		調査データキー
#	@return	半角英数字なら1
#
#------------------------------------------------------------------------------------------------------------
sub IsAlphabet
{
	my $this = shift;
	my (@pKeys) = @_;
	
	foreach (@pKeys) {
		if ($this->{'FORM'}->{$_} =~ /[^0-9a-zA-Z_@]/) {
			return 0;
		}
	}
	return 1;
}

#------------------------------------------------------------------------------------------------------------
#
#	特殊文字変換
#	--------------------------------------
#	@param	$pKeys		変更データキー
#	@return	なし
#
#------------------------------------------------------------------------------------------------------------
sub ConvChar
{
	my $this = shift;
	my (@pKeys) = @_;
	
	foreach (@pKeys) {
		if (! defined $this->{'FORM'}->{$_}) {
			$this->{'FORM'}->{$_} = '';
		}
		$this->{'FORM'}->{$_} =~ s/&/&amp;/g;
		$this->{'FORM'}->{$_} =~ s/"/&quot;/g; #"
		$this->{'FORM'}->{$_} =~ s/'/&#39;/g; #'
		$this->{'FORM'}->{$_} =~ s/\\/&#92;/g;
		$this->{'FORM'}->{$_} =~ s/</&lt;/g;
		$this->{'FORM'}->{$_} =~ s/>/&gt;/g;
		$this->{'FORM'}->{$_} =~ s/\n//g;
	}
	
}

#============================================================================================================
#	モジュール終端
#============================================================================================================
1;
