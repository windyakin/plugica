#====================================================================================================
#
#	ソケット送受信モジュール
#	sockets.pl
#
#	---------------------------------------------------------------------------
#
#	2012.09.14 １時間目 start
#
#====================================================================================================
package SOCKETS;

use strict;
use utf8;

use Socket;

#------------------------------------------------------------------------------------------------------------
#
#	モジュールコンストラクタ - new
#	-------------------------------------------
#	@param	なし
#	@return	モジュールオブジェクト
#
#------------------------------------------------------------------------------------------------------------
sub new
{
	my $this = shift;
	my $obj = {};
	
	$obj = {
		'SOCK'		=> undef,			# $sock
		'HOST'		=> 127.0.0.1,		# $packed_remote_host
		'PORT'		=> 55000,			# $remote_port
		'DATA'		=> undef,			# <$sock>
	};
	
	bless $obj, $this;
	
	return $obj;
}

#------------------------------------------------------------------------------------------------------------
#
#	ソケットの作成
#	-------------------------------------------
#	@param	なし
#	@return	作成に成功したら1 失敗したら0
#
#------------------------------------------------------------------------------------------------------------
sub CreateSocket
{
	my $this = shift;
	#my () = @_;
	#my ();
	
	eval {
		socket( $this->{'SOCK'}, PF_INET, SOCK_STREAM, getprotobyname('tcp') );
	};
	if ( $@ ) { # ソケットの作成エラー
		return 0;
	}
	
	return 1;
}

#------------------------------------------------------------------------------------------------------------
#
#	ソケット接続先の決定
#	-------------------------------------------
#	@param	$remote		接続先 [host]:[port]という形式
#	@return	なし
#
#------------------------------------------------------------------------------------------------------------
sub SetRemote
{
	my $this = shift;
	my ($remote) = @_;
	my ($remote_host, $remote_port);
	
	($remote_host, $remote_port) = split(/:/,$remote);
	$this->{'HOST'} = inet_aton( $remote_host );
	$this->{'PORT'} = $remote_port || $this->{'PORT'};
	
	return;
}

#------------------------------------------------------------------------------------------------------------
#
#	コネクション
#	-------------------------------------------
#	@param	$mes		接続先に送る内容
#	@return	作成に成功したら1 失敗したら0
#
#------------------------------------------------------------------------------------------------------------
sub ConnectHost
{
	my $this = shift;
	my ($mes) = @_;
	my ($sock, $sock_addr, $old_handle);
	
	# なんか色々と面倒なので普通の変数にする
	$sock = $this->{'SOCK'};
	
	# 初期化
	$this->{'DATA'} = undef;
	
	eval {
		# 接続～！
		$sock_addr = sockaddr_in( $this->{'PORT'}, $this->{'HOST'} );
		connect( $sock, $sock_addr );
	};
	if ( $@ ) {
		return 0;
	}
	
	# 書き込みバッファリングをしたくない！
	$old_handle = select $sock;
	$| = 1; # Perlの特殊変数って覚えられない
	select $old_handle;
	
	# 送りつける
	print $sock $mes;
	
	# 書き込みは終了しました
	shutdown $sock, 1;
	
	# 返答ありがとう
	while( <$sock> ){
		$this->{'DATA'} .= $_;
	}
	
	close $sock;
	
	# データが何も返って来なかった場合はエラーとする
	if ( $this->{'DATA'} eq undef ) {
		return 0;
	}
	
	# 戻しておく
	$this->{'SOCK'} = $sock;
	
	return 1;
}

#------------------------------------------------------------------------------------------------------------
#
#	受信内容を取得
#	-------------------------------------------
#	@param	$mes		接続先に送る内容
#	@return	作成に成功したら1 失敗したら0
#
#------------------------------------------------------------------------------------------------------------
sub GetData
{
	my $this = shift;
	
	return $this->{'DATA'};
}

1;
